import { GoogleGenAI } from "@google/genai";

export const config = {
  runtime: 'edge',
};

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ message: 'Only POST requests are allowed' }), {
      status: 405,
      headers: { 'Content-Type': 'application/json' },
    });
  }

  try {
    const { prompt, apiKey, aspectRatio } = await req.json();

    if (!prompt || !apiKey || !aspectRatio) {
      return new Response(JSON.stringify({ message: 'Missing "prompt", "apiKey", or "aspectRatio" in request body' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const ai = new GoogleGenAI({ apiKey });

    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: aspectRatio,
      },
    });

    if (!response.generatedImages || response.generatedImages.length === 0) {
      throw new Error("No images were generated by the API. The prompt may have been blocked or the API key might be invalid.");
    }

    const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
    const imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;

    return new Response(JSON.stringify({ imageUrls: [imageUrl] }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error("Error in /api/generate:", error);
    // The error from Google's API might be a structured object.
    const errorMessage = error instanceof Error ? error.message : "An unknown internal error occurred.";
    
    return new Response(JSON.stringify({ message: errorMessage, error: error }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}