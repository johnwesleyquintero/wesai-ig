import { GoogleGenAI, Modality } from "@google/genai";

export const config = {
  runtime: 'edge',
};

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ message: 'Only POST requests are allowed' }), {
      status: 405,
      headers: { 'Content-Type': 'application/json' },
    });
  }

  try {
    const { prompt, apiKey, aspectRatio, model } = await req.json();

    if (!prompt || !apiKey || !aspectRatio || !model) {
      return new Response(JSON.stringify({ message: 'Missing required parameters in request body' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const ai = new GoogleGenAI({ apiKey });
    let imageUrl: string;

    if (model === 'imagen-4.0-generate-001') {
      const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: aspectRatio,
        },
      });

      if (!response.generatedImages || response.generatedImages.length === 0) {
        throw new Error("No images were generated by Imagen. The prompt may have been blocked.");
      }
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;

    } else if (model === 'gemini-2.5-flash-image') {
      // Gemini Flash doesn't have a direct aspect ratio config, so we add it to the prompt.
      const guidedPrompt = `${prompt}, ${aspectRatio} aspect ratio`;
      
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
          parts: [{ text: guidedPrompt }],
        },
        config: {
          responseModalities: [Modality.IMAGE],
        },
      });

      const imagePart = response.candidates?.[0]?.content?.parts?.find(part => part.inlineData);
      if (!imagePart || !imagePart.inlineData) {
        throw new Error("No images were generated by Gemini. The prompt may have been blocked.");
      }
      const base64ImageBytes: string = imagePart.inlineData.data;
      imageUrl = `data:${imagePart.inlineData.mimeType};base64,${base64ImageBytes}`;

    } else {
      throw new Error(`Unsupported model: ${model}`);
    }

    return new Response(JSON.stringify({ imageUrls: [imageUrl] }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error("Error in /api/generate:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown internal error occurred.";
    
    return new Response(JSON.stringify({ message: errorMessage, error: error }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}