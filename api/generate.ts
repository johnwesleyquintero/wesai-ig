import { GoogleGenAI, Modality } from "@google/genai";

// By default, Vercel runs this as a serverless function. We can export a config to customize it.
export const config = {
  runtime: 'edge', // Edge functions are faster and more cost-effective for this type of proxy task.
};

/**
 * Vercel Edge Function to handle image generation requests.
 * It expects a POST request with a JSON body containing `prompt` and `apiKey`.
 */
export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ message: 'Only POST requests are allowed' }), {
      status: 405, // Method Not Allowed
      headers: { 'Content-Type': 'application/json' },
    });
  }

  try {
    const { prompt, apiKey } = await req.json();

    if (!prompt || !apiKey) {
      return new Response(JSON.stringify({ message: 'Missing "prompt" or "apiKey" in request body' }), {
        status: 400, // Bad Request
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // Initialize the AI client within the serverless function using the provided key.
    const ai = new GoogleGenAI({ apiKey });

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [{ text: prompt }],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const imageUrls: string[] = [];
    if (response.candidates && response.candidates.length > 0 && response.candidates[0].content) {
      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
          const base64ImageBytes: string = part.inlineData.data;
          const mimeType = part.inlineData.mimeType;
          imageUrls.push(`data:${mimeType};base64,${base64ImageBytes}`);
        }
      }
    }

    if (imageUrls.length === 0) {
      // This will be caught by the catch block below and returned as a 500 error.
      throw new Error("No images were generated by the API. The prompt may have been blocked due to safety policies or the API key might be invalid.");
    }

    // Success response
    return new Response(JSON.stringify({ imageUrls }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error("Error in /api/generate:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown internal error occurred.";
    
    // Error response
    return new Response(JSON.stringify({ message: errorMessage }), {
      status: 500, // Internal Server Error
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
